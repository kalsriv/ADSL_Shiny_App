df_new <- df_new %>% filter(A != "" & A != " ")
result_df <- df_new[which.max(df_new$B),]
print(paste0("The word ", "'", result_df$A, "'", " occurs ", result_df$B, " times."))
rm(list=ls())
my_data <- read_file("sample.txt") # Read the file using is thge part of readr library
my_data <- gsub("[\r\n\\]","", my_data) #Using gsub to remove next line and returns. gsub is a base r function that has proven speed and ease of use. Eventually gsub can be used for removing any unwanted word e.g. the and a, if required.
my_data <- gsub("[!|'|.|,|;|-|?|/]","", my_data) #Using gsub to remove excalamtion mark commas and fullstops etc.
my_data <- gsub("[\"]","", my_data) #Using gsub to remove slashes
my_data <- str_split(my_data, " ") #str_split is stringr function to split each word in our list
unique_data <- unique(unlist(my_data, use.names = FALSE)) #Creating a unique list to avoid duplication. This would help later in iteration by unique search word.
x <- length(unique_data) #Finding the length of this unique list
string_eval <- function() {
df <- data.frame()
for (i in 1:x){
x <- lengths(gregexpr(unique_data[i], my_data, ignore.case = TRUE))
df_ <- data.frame(unique_data[i], x)
df <- rbind(df, df_)
}
return(df)
}
max_eval <- function()
{df_new <- string_eval()
df_new <- df_new %>%
rename(
A = unique_data.i.,
B = x
)
df_new <- df_new %>% filter(A != "" & A != " ")
result_df <- df_new[which.max(df_new$B),]
return(result_df$B)
}
#string_eval()
context("strin evaluations")
test_that("running produce the number of times the result occurs", {
expect_equal(max_eval(), 258)
}
)
library(stringr)
library(pryr)
library(dplyr)
library(readr)
library(readtext)
library(testthat)
rm(list=ls())
my_data <- read_file("sample.txt") # Read the file using is the part of readr library
my_data <- gsub("[\r\n\\]","", my_data) #Using gsub to remove next line and returns. gsub is a base r function that has proven speed and ease of use. Eventually gsub can be used for removing any unwanted word e.g. the and a, if required.
my_data <- gsub("[!|'|.|,|;|-|?|/]","", my_data) #Using gsub to remove exclamation mark commas and fullstops etc.
my_data <- gsub("[\"]","", my_data) #Using gsub to remove slashes
my_data <- str_split(my_data, " ") #str_split is stringr function to split each word in our list
unique_data <- unique(unlist(my_data, use.names = FALSE)) #Creating a unique list to avoid duplication. This would help later in iteration by unique search word.
x <- length(unique_data) #Finding the length of this unique list
string_eval <- function() { #Creating function to count occurence by each search word
for (i in 1:x){
x <- lengths(gregexpr(unique_data[i], my_data, ignore.case = TRUE)) #Using regex for checking and counting
print(paste0(unique_data[i], " occurs ", x, " times ")) #Preparing the outcome
}
}
timex <- system.time(string_eval()) #Running the function and checking the time
print(timex)
print(paste0("Total memory used is ", mem_used()))
rm(my_data) #Removing the interim objects
rm(list=ls())
my_data <- read_file("sample.txt")
my_data <- gsub("[\r\n\\]","", my_data)
my_data <- gsub("[!|'|.|,|;|-|?|/]","", my_data)
my_data <- gsub("[\"]","", my_data)
my_data <- str_split(my_data, " ")
unique_data <- unlist(my_data, use.names = FALSE) %>% unique()
x <- unique_data %>% length
string_eval <- function() {
for (i in 1:x){
x <- gregexpr(unique_data[i], my_data, ignore.case = TRUE) %>% lengths()
paste0(unique_data[i], " occurs ", x, " times ") %>% print()
}
}
timex <- string_eval() %>% system.time()
timex %>% print()
rm(my_data)
#https://cran.r-project.org/web/views/ClinicalTrials.html
#https://www.quanticate.com/blog/r-programming-in-clinical-trials
#https://cran.r-project.org/web/packages/admiral/vignettes/bds_finding.html
library(dplyr)
library(dplyrAssist)
library(dplyrshortcut)
library(reactable)
ls("package:dplyrshortcut")
library(magrittr)
library(xportr)
library(RSQLite)
library(haven)
library(data.table)
library(flextable)
library("readxl")
library(arsenal)
# install.packages("devtools")
#devtools::install_github("gpaux/Mediana") #Devtools at the rescue
library(admiral)
#ls("package:admiral") #List the functions available
library(Mediana) #http://gpaux.github.io/Mediana/CaseStudies.html
library(safetyData)
library(admiral.test)
library(clinUtils)
library(SAScii)
library(rclinicaltrials)
# install.packages("devtools")
#devtools::install_github("gpaux/Mediana") #Devtools at the rescue
library(admiral)
#ls("package:admiral") #List the functions available
library(Mediana) #http://gpaux.github.io/Mediana/CaseStudies.html
library(safetyData)
library(admiral.test)
library(clinUtils)
library(SAScii)
#library(rclinicaltrials)
#library(dplyr, warn.conflicts = FALSE)
#library(admiral.test)
library(lubridate)
library(stringr)
library(tibble)
#Summon all the data
data("admiral_dm")
data("admiral_ds")
data("admiral_ex")
data("admiral_ae")
data("admiral_lb")
dm <- admiral_dm
ds <- admiral_ds
ex <- admiral_ex
ae <- admiral_ae
lb <- admiral_lb
ls("package:admiral")
adsl <- admiral::admiral_adsl
adsl %>% class()
adsl %>% view()
admiral::ae_gr1_event(adsl)
admiral::ae_gr1_event()
?ae_gr1_event()
ls("package:admiral")  %>%  reactable()
dm %>% colnames()
ae %>% colnames()
addm <- dm %>% select(-DOMAIN)
adae <- ae %>% select(-DOMAIN)
adae %>% colnames()
addm %>% colnames()
addm %>% select(USUBJID, SUBJID)
addm <- addm %>% select(-SUBJID)
addm %>% colnames()
addm %>% paste0(USUBJID = c("USUBJID", "STUDYID"))
addm %>% mutate(USUBJID = paste0(USUBJID, "_", STUDYID))
addm %>% mutate(USUBJID = paste0(USUBJID, "_", STUDYID)) %>% select(USUBJID)
addm %>%  select(USUBJID)
addm %>% mutate(USUBJID = paste0(STUDYID, "_", USUBJID)) %>% select(USUBJID)
addam <- addm %>% mutate(USUBJID = paste0(STUDYID, "_", USUBJID)) %>% select(-STUDYID)
addam %>% head()
adae <- adae %>% mutate(USUBJID = paste0(STUDYID, "_", USUBJID)) %>% select(-STUDYID)
addm <- addm %>% mutate(USUBJID = paste0(STUDYID, "_", USUBJID)) %>% select(-STUDYID)
rm(addam)
addm %>% colnames
adae %>% colnames
addm %>% dim()
adae %>% dim
left_join(adae, addm, by = "USUBJID")
left_join(adae, addm, by = "USUBJID") %>% View()
adrs <- left_join(adae, addm, by = "USUBJID") %>% View()
adrs <- left_join(adae, addm, by = "USUBJID")
adrs %>% reactable()
addm %>% colnames()
remotes::install_github("Open-Systems-Pharmacology/TLF-Library")
install.packages("ospsuite.utils")
remotes::install_github("Open-Systems-Pharmacology/OSPSuite.RUtils")
remotes::install_github("Open-Systems-Pharmacology/OSPSuite.RUtils")
remotes::install_github("Open-Systems-Pharmacology/TLF-Library")
library(DESeq2)
BiocManager::install("DESeq2")
library(DESeq2)
library(edgeR)
BiocManager::install("edgeR")
library(DESeq2)
library(edgeR)
library(limma)
library(Biobase)
library(dplyr)
library(ggplot2)
library(org.Hs.eg.db)
BiocManager::install("org.Hs.eg.db")
library(DESeq2)
library(edgeR)
library(limma)
library(Biobase)
library(dplyr)
library(ggplot2)
library(org.Hs.eg.db)
library(pheatmap)
load("C:/Users/kalsr/Documents/gilad_eset.RData")
data <- gilad.eset
head(data)
print(data)
mtData <-pData(data)
cpm.mat <- log(cpm(exprs(data)))
mean.vec <- apply(cpm.mat, 1, mean)
sdvec <- apply(cpm.mat, 1, sd)
plot(mean.vec, sdvec, pch =".", ylab="sd", xlab="Average logCPM")
colnames(data)
dds <- DESeqDataSetFromMatrix(countData = exprs(data), colData = mtData, design = ~gender)
dds <- DESeq(dds)
plotDispEsts(dds)
# need transformed values to generate a heat plot of high differential expression
vsd <- vst(dds, blind=FALSE) # Variance stabilizing transformation
rld <- rlog(dds, blind=FALSE) # Controls for rows with few counts
ntd <- normTransform(dds) # Transforms data for plotting
top20 <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:20] # Average counts for each gene and Select top 20 most abundant genes
pheatmap(assay(ntd)[top20,])
#Next we would work with the gene names and try to find significant and positive log fold genes
ddsDF <- results(dds)
class(ddsDF) #This is not a data frame yet
ddsDF <- as.data.frame(ddsDF) #This is a data frame
head(ddsDF)
gene.list <- rownames(ddsDF)
head(gene.list)
geneinfo <- AnnotationDbi::select(org.Hs.eg.db, keys=rownames(dds),
columns=c("ENSEMBL","SYMBOL","GENENAME"),
keytype="ENSEMBL")
geneinfo %>% head()#... since this is huge number of entries
# Let us work only with significant values and generate the list of genes that are significant
ddsDF05 <- ddsDF[which(ddsDF$pvalue <= 0.05),]
geneinfo05 <- AnnotationDbi::select(org.Hs.eg.db, keys=rownames(ddsDF05),
columns=c("ENSEMBL","SYMBOL","GENENAME"),
keytype="ENSEMBL")
ddsDF05_positive <- ddsDF05[ddsDF05$log2FoldChange >= 0,]
geneinfo05_positive <- AnnotationDbi::select(org.Hs.eg.db, keys=rownames(ddsDF05_positive),
columns=c("ENSEMBL","SYMBOL","GENENAME"),
keytype="ENSEMBL")
print(geneinfo05_positive)
#This would generate a list of genes that are significant and have log2fold change as positive
#Now some PCA analysis
exprsData <-  as.data.frame(exprs(data))
exprsMat <- as.matrix(exprsData)
df_pca <- prcomp(exprsMat)
plot(df_pca$x[,1], df_pca$x[,2])
#plot(df_pca$x[,3], df_pca$x[,4])
geneinfo05_positive %>% View()
geneinfo %>% View()#
library(dplyr)
c1 %>% read.csv((file.choose())
c1 %>% read.csv(file.choose())
library(dplyr)
c1 %>% read.csv(file.choose())
c1 <- read.csv(file.choose())
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
c1 <- read.csv(file.choose())
c1 %>% colnames()
c1 %>% View()
select("innings_id" ,   "name"  ,        "fullName"     ,
"overs"     ,    "maidens"  ,     "conceded"    ,  "wickets"    ,   "economyRate" ,  "dots"         , "foursConceded" , "sixesConceded" ,"wides"    ,     "noballs"  )
select(innings_id, name, fullName, overs, maidens, conceded, wickets, economyRate, dots, foursConceded, sixesConceded, wides, noballs)
c1 %>% select(innings_id, name, fullName, overs, maidens, conceded, wickets, economyRate, dots, foursConceded, sixesConceded, wides, noballs)
library(dplyr)
c1 %>% select(innings_id, name, fullName, overs, maidens, conceded, wickets, economyRate, dots, foursConceded, sixesConceded, wides, noballs)
c1 %>% select(innings_id, name)
class(c1)
c1
head(c1)
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(dplyr)
c1 <- read.csv(file.choose())
class(c1)
head(c1)
c1 %>% colnames()
c1 %>% View()
c1 %>% select(innings_id, name, fullName, overs, maidens, conceded, wickets, economyRate, dots, foursConceded, sixesConceded, wides, noballs)
install.packages("conflicted")
library(conflicted)
library(ggplot2)
conflict_prefer("select", "data.frame")
c1 %>% select(innings_id, name, fullName, overs, maidens, conceded, wickets, economyRate, dots, foursConceded, sixesConceded, wides, noballs)
conflict_prefer("select", "dplyr")
conflict_prefer("select", "dplyr")
c1 %>% select(innings_id, name, fullName, overs, maidens, conceded, wickets, economyRate, dots, foursConceded, sixesConceded, wides, noballs)
conflict_prefer("select", "dplyr")
c1_new <- c1 %>% select(innings_id, name, fullName, overs, maidens, conceded, wickets, economyRate, dots, foursConceded, sixesConceded, wides, noballs)
c1_new %>% summary()
c1_new %>% filter(match_id)
c1_new %>% filter(match_id = 1)
c1_new %>% filter(match_id = "1")
c1_new %>% filter(innings_id = "1")
c1_new %>% filter(innings_id = 1)
c1_new %>% filter(innings_id == 1)
c1_new %>% filter(innings_id = 1)
c1_new %>% filter(innings_id = 1)
c1_new %>% dplyr::filter(innings_id = 1)
c1_new %>% dplyr::filter(innings_id == 1)
#conflict_prefer("select", "dplyr")
c1_new <- c1 %>% dplyr::select(innings_id, name, fullName, overs, maidens, conceded, wickets, economyRate, dots, foursConceded, sixesConceded, wides, noballs)
c1_new %>% summarise()
c1_new %>% summarise(overs)
c1_new %>% summarise(name)
c1_new %>% summarise(
All_names = mean(name),
Total_Overs = mean(overs))
c1_new %>% summarise(
All_wickets = mean(wickets),
Total_Overs = mean(overs))
c1_new %>% summarise(
All_wickets = max(wickets),
Total_Overs = mean(overs))
c1_new %>% summarise(fullName,
All_wickets = mean(wickets),
Total_Overs = mean(overs))
c1_new %>% summarise(fullName,
All_wickets = max(wickets),
Total_Overs = mean(overs))
c1_new %>% summarise(fullName,
All_wickets = max(wickets),
Total_Overs = min(overs))
c1_new %>% summarise(n = n())
c1_new %>% summarise(name,n = n())
c1_new %>%  group_by()  %>%  summarise(name,n = n())
c1_new %>%  group_by(name)  %>%  summarise(name,n = n())
c1_new %>%  group_by(name)
c1 %>%  group_by(city)
#conflict_prefer("select", "dplyr")
c1_new <- c1 %>% dplyr::select(city, innings_id, name, fullName, overs, maidens, conceded, wickets, economyRate, dots, foursConceded, sixesConceded, wides, noballs)
c1_new %>% summary()
c1_new %>%  group_by(city)
c1_new %>%  dplyr::group_by(city)
c1_new %>% dplyr::filter(innings_id == 1)
c1_new %>%  dplyr::group_by(city) %>% aggregate()
c1_new %>%  dplyr::group_by(city) %>% aggregate(mean(overs))
c1_new %>%  dplyr::group_by(city) %>% dplyr::aggregate(mean(overs))
c1_new %>%  dplyr::group_by(city) %>% summarise(across(everything(), mean)
c1_new %>%  dplyr::group_by(city) %>% summarise(across(everything(), mean))
c1_new %>%  dplyr::group_by(city) %>% summarise(across(conceded, mean))
c1_new %>%  dplyr::group_by(name) %>% summarise(across(conceded, mean))
c1_new %>%  dplyr::group_by(city, name) %>% summarise(across(conceded, mean))
c1_new %>%  dplyr::group_by(name, city) %>% summarise(across(conceded, mean))
c1_new %>%  dplyr::group_by(name, city) %>% summarise(fullName, across(conceded, mean))
c1_new %>%  dplyr::group_by(name, city) %>% summarise(maidens, conceded, wickets, economyRate, dots, across(conceded, mean))
c1_new %>%  dplyr::group_by(city) %>% summarise(name, maidens, conceded, wickets, economyRate, dots, across(conceded, mean))
c1_new %>%  dplyr::group_by(city, name) %>% summarise(name, maidens, conceded, wickets, economyRate, dots, across(conceded, mean))
c1_new %>%  dplyr::group_by(city, name) %>% summarise(maidens, conceded, wickets, economyRate, dots, across(conceded, mean))
c1_new %>%  dplyr::group_by(city, name) %>% summarise(maidens, conceded, wickets, economyRate, dots, across(conceded, max))
shiny::runApp('cellregan')
runApp('cellregan')
runApp('cellregan')
library(DT)
DT::datatable(iris)
runApp('cellregan')
runApp('cellregan')
runApp('cellregan')
runApp('cellregan')
runApp('cellregan')
runApp('cellregan')
runApp('cellregan')
runApp('cellregan')
runApp('cellregan')
install.packages("ReviewR")
ReviewR::
ReviewR::redcap_survey_complete
install.packages("r2rtf")
runApp('ShinyApp-ggplot2')
runApp('ShinyApp-ggplot2')
runApp('ShinyApp-ggplot2')
runApp('cellregan/appDT.R')
runApp('ShinyApp-ggplot2')
runApp('ShinyApp-ggplot2')
runApp('ShinyApp-ggplot2')
runApp('ShinyApp-ggplot2')
runApp('ShinyAppWithPackageDataShort')
runApp()
runApp()
runApp()
runApp()
runApp('ShinyAppWithPackageDataShort')
runApp('takePersonalInfoExercise1')
runApp('takePersonalInfoExercise1')
runApp('takePersonalInfoExercise1')
runApp('takePersonalInfoExercise1')
runApp('takePersonalInfoExercise1')
runApp('takePersonalInfoExercise1')
runApp('takePersonalInfoExercise1')
runApp('takePersonalInfoExercise1')
runApp('takePersonalInfoExercise1')
runApp('whatIsError1')
runApp('whatIsError1')
runApp('whatIsError1')
runApp('whatIsError1')
runApp('whatIsError1')
runApp('DateFormatChanger1')
library(lubridate)
runApp('DateFormatChanger1')
runApp('DateFormatChanger1')
runApp('DateFormatChanger1')
runApp('DateFormatChanger1')
runApp('DateFormatChanger1')
runApp('DateFormatChanger1')
runApp('DateFormatChanger1')
runApp('DateFormatChanger1')
runApp('DateFormatChanger1')
runApp('DateFormatChanger1')
runApp('ShinyAppDuplicate2')
runApp('ShinyAppDuplicate2')
runApp()
runApp('ShinyAppDuplicate2')
runApp('ShinyAppDuplicate2')
runApp('ShinyAppDuplicate2')
runApp('ShinyAppDuplicate2')
runApp('ShinyAppDuplicate2')
runApp('ShinyAppDuplicate2')
runApp('ShinyAppDuplicate2')
runApp('ShinyAppDuplicate2')
runApp('ShinyAppDuplicate2')
runApp('ShinyAppDuplicate2')
runApp('ShinyAppDuplicate2')
runApp('ShinyAppDuplicate2')
runApp('ShinyAppDuplicate2')
runApp('ShinyAppDuplicate2')
runApp('ShinyAppDuplicate2')
runApp('ShinyAppDuplicate2')
runApp('ShinyAppDuplicate2')
runApp('ShinyAppDuplicate2')
runApp('ShinyAppDuplicate2')\
runApp('ShinyAppDuplicate2')
runApp('ShinyAppDuplicate2')
ggplot2::seals
runApp('ShinyAppDuplicate2')
runApp('ShinyAppDuplicate2')
runApp('ShinyAppDuplicate2')
runApp('ShinyAppDuplicate2')
runApp('ShinyAppDuplicate2')
runApp('DateFormatChanger1')
runApp('DateFormatChanger1')
runApp('DateFormatChanger1')
as.Date(67, "%d%m%Y")
runApp('DateFormatChanger1')
runApp('DateFormatChanger1')
runApp('DateFormatChanger1')
runApp('DateFormatChanger1')
runApp('DateFormatChanger1')
runApp('DateFormatChanger1')
runApp('DateFormatChanger1')
runApp('adsl_shiny')
df_xpt <- haven::read_xpt(file.choose())
df_xpt <- haven::read_xpt(C:\\Users\\kalsr\\Documents\\adsl_shiny)
df_xpt <- haven::read_xpt(C:/Users/kalsr/Documents/adsl_shiny)
df_xpt <- haven::read_xpt("C:/Users/kalsr/Documents/adsl_shiny")
df_xpt <- haven::read_xpt("C:/Users/kalsr/Documents/adsl_shiny/adsl.xpt")
df_xpt
df_xpt %>% str()
df_xpt %>% summarise()
df_xpt %>% summary
runApp('adsl_shiny')
runApp('adsl_shiny')
runApp('cellregan/appVioplot.R')
runApp('adsl_shiny/appVioplot.R')
df_xpt <- haven::read_xpt("C:/Users/kalsr/Documents/adsl_shiny/adsl.xpt")
df_xpt
df_xpt %>% View()
df_xpt %>% summarise()
df_xpt %>% summary()
df_xpt %>% str()
runApp('adsl_shiny/appVioplot.R')
runApp('adsl_shiny/appVioplot.R')
runApp('adsl_shiny/appVioplot.R')
runApp('adsl_shiny/appVioplot.R')
runApp('ShinyAppPlannedTreatment')
runApp('adsl_shiny/appVioplotPlannedTreatment.R')
runApp('appVioinPlotRegression')
runApp('adsl_shiny/appVioplotPlannedBMIRegression.R')
runApp('adsl_shiny/appVioplotPlannedBMIRegression.R')
runApp('adsl_shiny/appVioplotPlannedBMIRegression.R')
runApp('adsl_shiny/appVioplotPlannedBMIRegression.R')
runApp('adsl_shiny/appVioplotPlannedBMIRegression.R')
runApp('adsl_shiny/appVioplotPlannedBMIRegression.R')
runApp('adsl_shiny/appVioplotPlannedBMIRegression.R')
runApp('adsl_shiny/appVioplotPlannedBMIRegression.R')
runApp('adsl_shiny/appVioplotPlannedBMIRegression.R')
runApp('adsl_shiny/appVioplotActualBeeswarm.R')
runApp('adsl_shiny/appVioplotActualBeeswarm.R')
runApp('adsl_shiny/appVioplotActualBeeswarm.R')
runApp('adsl_shiny/appVioplotActualBeeswarm.R')
runApp('adsl_shiny/appVioplotActualBeeswarm.R')
runApp('adsl_shiny/appVioplotActualBeeswarm.R')
runApp('adsl_shiny/appVioplotActualBeeswarm.R')
runApp('adsl_shiny/appVioplotActualBeeswarm.R')
df_xpt %>% str()
runApp('adsl_shiny/appVioplotActualTreatEndTreat.R')
runApp('adsl_shiny/appVioplotActualTreatEndTreat.R')
runApp('adsl_shiny/appVioplotActualTreatEndTreat.R')
runApp('adsl_shiny/appVioplotActualTreatEndTreat.R')
runApp('adsl_shiny/appVioplotActualTreatEndTreat.R')
runApp('adsl_shiny/appVioplotActualTreatEndTreat.R')
runApp('adsl_shiny/appBoxPlotActualTreatEndTreat.R')
runApp('adsl_shiny/appBoxPlotActualTreatEndTreat.R')
runApp('adsl_shiny/appBoxPlotActualTreatEndTreat.R')
runApp('adsl_shiny/appBoxPlotActualTreatEndTreat.R')
runApp('adsl_shiny/appVioplotActualBeeswarm.R')
runApp('adsl_shiny/appVioplotActualBeeswarm.R')
runApp('adsl_shiny/appVioplotActualBoxplot.R')
runApp('adsl_shiny/appVioplotActualBoxplot.R')
runApp('adsl_shiny/appVioplotActualBoxplot.R')
runApp('adsl_shiny/appVioplotActualBoxplot.R')
runApp('adsl_shiny/appVioplotActualBoxplot.R')
runApp('adsl_shiny/appVioplotActualBoxplot.R')
runApp('adsl_shiny/appVioplotActualBoxplot.R')
runApp('appVioplotActualBoxplot.R')
runApp('adsl_shiny/appVioplotActualBoxplot.R')
library(shiny); runApp('adsl_shiny/appVioplotActualBoxplot.R')
shiny::runApp('~/DiseaseNameFromColumnName')
